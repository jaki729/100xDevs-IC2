Common JS browser engines:
V8(google) and SpiderMonkey(firefox)
This compiles JS code into 0 and 1

Frontend: client side 
Backend: server side

ECMAScript, Node, Bun 
HTTP server: 
In backend, a protocol is defined for machines to communicate.
Specifically for websites , it is the most common way for your websites frontend to talk to its backend.
In the end its the client throwing some information at a server
Server doing somthing with that information and responding back with the final result
HTTP(client side):
--protocol(http/https)
--address(url/ip/port)
--Route
--Headers, body , query parameters
--method
HTTP(server side)
--response Headers
--response body
--status codes

NodeJS is an open-source server environment that executes JavaScript code outside of a web browser.

What happems when we type url in browser?
Browser parses the url
Does a DNS lookup(converts url to ip)
Establishes a conection to the IP(does handshake...)

Things that happen on your server after the request is recieved
Get the inputs(route, body, headers)
Do some logic on the input calculate the output
then return the output body, headers and status code.

Common methods send to backend server are GET, POST, PUT, DELETE.
Common status codes the backend responds with:
200 OK - Everything is fine
404 Not Found - The requested resource does not exist
403 - Authentication issues
411 - Request is rejected, invalid input
500 - Internal server error

What is DNS resolution?
url are just like contacts in your phone
in the end they map to an ip
if you ever buy a url of your own you will need to point it, to the ip of your server.

const port = process.env.PORT (its an environment variable)

The body-parser module enables us to parse incomming request bodies in a middleware.
Express.js server needs to know what type of data you are sending over the network so that it can parse it.

Request handlers
GET: Retrive data from a specified resource
POST: Submit data to be processed to a specified resource
PUT: Update a resource, replacing it if it exsits or creating it if it doesn't
DELETE: Delete the specified resource