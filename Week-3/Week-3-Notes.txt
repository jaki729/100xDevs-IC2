They're essentially functions or processes that are executed between the incoming request and the server's response. 
In the context of web servers or frameworks, they intercept and process HTTP requests.
Middlewares:
In frameworks like Express.js (for Node.js), middlewares can perform tasks like logging, authentication, data parsing, error handling, and more.
They sit in the middle of the request-response cycle, allowing developers to modularize functionalities and apply them to specific routes 
or globally across the application.
Middleware functions have access to the request and response objects and can modify them, 
terminate the request-response cycle, or pass control to the next middleware in the stack by calling the next() function.

req:callback argument to the middleware function called next by conversation
res:HTTP response argument to the middleware function, called res by conversation 
next: HTTP request argument to the middleware function, called req by conversation
what is app.use(express.json()): 
It is a middleware function that is used to parse incoming requests with JSON payloads.

Sample Example without middleware:
const express = require('express')
const app = express()
app.get('/', (req,res) => {
    res.send('Hello jaki')
})
app.listen(3000)

Sample Example with middleware:
const express = require('express')
const app = express()
const myLogger = function(req,res,next) {
    console.log("logged")
    next(); //calls the next middleware in the stack
}
app.use(myLogger)
app.get('/', (req,res) => {
    res.send('Hello jaki')
})
app.listen(3000)

Zod: Schema declaration and validation library

Authentication:
To authenticate users you need to use sessions or tokens.
Sessions are stored on the server side using cookies or local storage.